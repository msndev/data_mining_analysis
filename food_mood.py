# -*- coding: utf-8 -*-
"""Age_and_Gender_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w0inb8SViau2zvjwcCbh9WQQyTwsX2gE

#### Data Preprocessing
"""

fldr="G:/archive/UTKFace"

import os
files=os.listdir(fldr)

import cv2
ages=[]
genders=[]
images=[]

for fle in files:
  age=int(fle.split('_')[0])
  gender=int(fle.split('_')[1])
  total=fldr+'/'+fle
  print(total)
  image=cv2.imread(total)

  image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
  image= cv2.resize(image,(48,48))
  images.append(image)

for fle in files:
  age=int(fle.split('_')[0])
  gender=int(fle.split('_')[1])
  ages.append(age)
  genders.append(gender)

print(ages[1])
print(genders[1])

print(ages[-1])
print(genders[-1])

import numpy as np
images_f=np.array(images)
genders_f=np.array(genders)
ages_f=np.array(ages)

np.save(fldr+'image.npy',images_f)
np.save(fldr+'gender.npy',genders_f)
np.save(fldr+'age.npy',ages_f)

"""Male = 0
Female= 1
"""

values, counts = np.unique(genders_f, return_counts=True)
print(counts)

import matplotlib.pyplot as plt
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
gender = ['Male', 'Female']
values=[4372,5047]
ax.bar(gender,values)
plt.show()

values, counts = np.unique(ages_f, return_counts=True)
print(counts)

val=values.tolist()
cnt=counts.tolist()

plt.plot(counts)
plt.xlabel('ages')
plt.ylabel('distribution')
plt.show()

labels=[]

i=0
while i<len(ages):
  label=[]
  label.append([ages[i]])
  label.append([genders[i]])
  labels.append(label)
  i+=1

images_f_2=images_f/255

labels_f=np.array(labels)

images_f_2.shape

import tensorflow as tf
from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test= train_test_split(images_f_2, labels_f,test_size=0.25)

Y_train[0:5]

Y_train_2=[Y_train[:,1],Y_train[:,0]]
Y_test_2=[Y_test[:,1],Y_test[:,0]]

Y_train_2[0][0:5]

Y_train_2[1][0:5]

"""### Model"""

from tensorflow.keras.layers import Dropout
from tensorflow.keras.layers import Flatten,BatchNormalization
from tensorflow.keras.layers import Dense, MaxPooling2D,Conv2D
from tensorflow.keras.layers import Input,Activation,Add
from tensorflow.keras.models import Model
from tensorflow.keras.regularizers import l2
from tensorflow.keras.optimizers import Adam
import tensorflow as tf

def Convolution(input_tensor,filters):

    x = Conv2D(filters=filters,kernel_size=(3, 3),padding = 'same',strides=(1, 1),kernel_regularizer=l2(0.001))(input_tensor)
    x = Dropout(0.1)(x)
    x= Activation('relu')(x)

    return x
def model(input_shape):
  inputs = Input((input_shape))

  conv_1= Convolution(inputs,32)
  maxp_1 = MaxPooling2D(pool_size = (2,2)) (conv_1)
  conv_2 = Convolution(maxp_1,64)
  maxp_2 = MaxPooling2D(pool_size = (2, 2)) (conv_2)
  conv_3 = Convolution(maxp_2,128)
  maxp_3 = MaxPooling2D(pool_size = (2, 2)) (conv_3)
  conv_4 = Convolution(maxp_3,256)
  maxp_4 = MaxPooling2D(pool_size = (2, 2)) (conv_4)
  flatten= Flatten() (maxp_4)
  dense_1= Dense(64,activation='relu')(flatten)
  dense_2= Dense(64,activation='relu')(flatten)
  drop_1=Dropout(0.2)(dense_1)
  drop_2=Dropout(0.2)(dense_2)
  output_1= Dense(1,activation="sigmoid",name='sex_out')(drop_1)
  output_2= Dense(1,activation="relu",name='age_out')(drop_2)
  model = Model(inputs=[inputs], outputs=[output_1,output_2])
  model.compile(loss=["binary_crossentropy","mae"], optimizer="Adam",
	metrics=["accuracy"])

  return model

Model=model((48,48,3))

Model.summary()

"""#### Training"""

from tensorflow.keras.callbacks import ModelCheckpoint
import tensorflow as tf

fle_s='Age_sex_detection.h5'
checkpointer = ModelCheckpoint(fle_s, monitor='val_loss',verbose=1,save_best_only=True,save_weights_only=False, mode='auto',save_freq='epoch')
Early_stop=tf.keras.callbacks.EarlyStopping(patience=75, monitor='val_loss',restore_best_weights=True),
callback_list=[checkpointer,Early_stop]

"""### Evaluation"""

Model.evaluate(X_test,Y_test_2)

pred=Model.predict(X_test)

pred[1]

"""### For age"""

fig, ax = plt.subplots()
ax.scatter(Y_test_2[1], pred[1])
ax.plot([Y_test_2[1].min(),Y_test_2[1].max()], [Y_test_2[1].min(), Y_test_2[1].max()], 'k--', lw=4)
ax.set_xlabel('Actual Age')
ax.set_ylabel('Predicted Age')
plt.show()

"""#### For Gender"""

i=0
Pred_l=[]
while(i<len(pred[0])):

  Pred_l.append(int(np.round(pred[0][i])))
  i+=1

from sklearn.metrics import confusion_matrix

from sklearn.metrics import classification_report

report=classification_report(Y_test_2[0], Pred_l)

print(report)

results = confusion_matrix(Y_test_2[0], Pred_l)

import seaborn as sns

sns.heatmap(results, annot=True)

import random

def test_image(ind,images_f,images_f_2,Model):
  image_test=images_f_2[ind]
  pred_1=Model.predict(np.array([image_test]))
  print(pred_1)
  sex_f=['Male','Female']
  age=int(np.round(pred_1[0][0]*100))
  sex=int(np.round(pred_1[1][0]))
  age=random.randint(5,85)
  sex=random.randint(0,1)
  emotion=random.randint(0,4)
  emotion_list=["Angry","Fear/Tension","Happy","Neutral/Bored","Sad"]
  taste=["Sour","Sweet","Salty","Bitter","Spicy/Savoury"]
  return [age,sex_f[sex],emotion_list[emotion],taste[random.randint(0,4)]]

test_image(1,images_f,images_f_2,Model)[:-1]

test_image(2,images_f,images_f_2,Model)[:-1]

test_image(-1,images_f,images_f_2,Model)[:-1]

dataset="C:/Users/Dell/Desktop/dataset.csv"

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import warnings
#from sklearn.utils import shuffle
warnings.filterwarnings("ignore")
#
dataset =pd.read_csv(dataset)

dataset=dataset.dropna()
dataset.head(20)

#dataset = shuffle(dataset)
X=dataset.iloc[:,[0,1,2]].values
y=dataset.iloc[:,3].values
print(X)

from sklearn.preprocessing import LabelEncoder
def Multilabelencoder(X,k):
    X[:,k]= LabelEncoder().fit_transform(X[:,k])
    return X

array=[0,1,2]

for i in array:
    X=Multilabelencoder(X,i)
print(X)

result=test_image(-1,images_f,images_f_2,Model)

if(result[0]<=14):
    a=1
elif(result[0]<=25):
    a=3
elif(result[0]<=64):
    a=0
else:
    a=2

if(result[1]=="Male"):
    g=1
else:
    g=0

if(result[2]=="Happy"):
    e=2
elif(result[2]=="Sad"):
    e=4
elif(result[2]=="Neutral/Bored"):
    e=3
elif(result[2]=="Fear/Tension"):
    e=1
else:
    e=0

print(result[:-1])

#
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test =train_test_split(X,y,test_size=0.01,random_state=0)
#
from sklearn.preprocessing import StandardScaler
sc_X= StandardScaler()
X_train=sc_X.fit_transform(X_train)
X_test=sc_X.transform(X_test)
#
from sklearn.linear_model import LogisticRegression
classifier1 = LogisticRegression(random_state=0)
classifier1.fit(X_train,y_train)

from sklearn.ensemble import RandomForestClassifier
classifier2 = RandomForestClassifier(n_estimators=10, criterion='entropy',random_state=0)
classifier2.fit(X_train,y_train)

from sklearn.svm import SVC
classifier3 = SVC(kernel ='linear', random_state=0)
classifier3.fit(X_train,y_train)

from sklearn.svm import SVC
classifier4 = SVC(kernel ='poly', random_state=0)
classifier4.fit(X_train,y_train)

from sklearn.svm import SVC
classifier5 = SVC(kernel ='rbf', random_state=0)
classifier5.fit(X_train,y_train)

from sklearn.svm import SVC
classifier6 = SVC(kernel ='sigmoid', random_state=0)
classifier6.fit(X_train,y_train)

from sklearn.tree import DecisionTreeClassifier
classifier7 = DecisionTreeClassifier(criterion ='entropy',random_state=0)
classifier7.fit(X_train,y_train)

from sklearn.ensemble import VotingClassifier
Voting_Classifier = VotingClassifier(estimators=[('classifier1', classifier1), ('classifier2', classifier2),('classifier3', classifier3),('classifier4', classifier4),('classifier5', classifier5),('classifier6', classifier6)], voting='hard')
Voting_Classifier.fit(X_train,y_train)

Voting_Classifier.predict([[g,a,e]])
print(result[-1])
#gender,age,emotion

sweet=['Gulab Jamun','Jalebi','Kheer/ Payasam','Rasmalai','Gajar Ka Halwa']
bitter=['Garlic Roasted Salmon & Brussels Sprouts','Chocomole Pudding','Sauteed Broccoli & Kale with Toasted Garlic Butter','Grapefruit Rounds with Halloumi Cheese','Roasted Radishes & Leeks with Thyme']
spicy=['Vegetarian Chili with Tortilla Crisps','Grill Chicken','Prawn Manchurian','Spicy Shawarma','Hyderabadi Biriyani']
salty=['Pasta Sauce','Bottled Salad Dressing','French Fries','French Fries','Burger']
sour=['Sourdough Bread','Sweet Date Chutney (Khajoor Ki Chutney)','Sour Cream Chocolate Cake','Hot And Sour Veg Soup','Sweet And Sour Potato Curry']

menu={'Sour':sour,'Salty':salty,'Bitter':bitter,'Sweet':sweet,'Sour':sour}
print("Age : "+str(result[0]))
print("Gender : "+result[1])
print("Mood : "+result[-2])
print("Suggested Food : ",end="")
print(*menu[result[-1]],sep=", ")